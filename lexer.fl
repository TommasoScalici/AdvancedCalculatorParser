%{
    #include <stdio.h>
    #include <stdlib.h>
    #include "parser.tab.h"

    FILE *yyin;
    FILE *yyout;
%}

%option yylineno
%option noyywrap

digit [0-9]
number {digit}+

%%


    /* Unary and Binary Operators */

"+"             { return(yytext[0]); }
"-"             { return(yytext[0]); }
"*"             { return(yytext[0]); }
"/"             { return(yytext[0]); }
"="             { yylval.string = strdup(yytext); return(ASSIGN); }
"+="            { yylval.string = strdup(yytext); return(ASSIGN_PLUS); }
"-="            { yylval.string = strdup(yytext); return(ASSIGN_MINUS); }
"*="            { yylval.string = strdup(yytext); return(ASSIGN_MUL); }
"/="            { yylval.string = strdup(yytext); return(ASSIGN_DIV); }


    /* Parenthesis */

"("             { return(PAR_OPEN); }
")"             { return(PAR_CLOSED); }


    /* Functions */

"print"         { return(PRINT); }
"log"           { yylval.string = strdup(yytext); return(LOG); }
"sin"           { yylval.string = strdup(yytext); return(SIN); }
"cos"           { yylval.string = strdup(yytext); return(COS); }
"tan"           { yylval.string = strdup(yytext); return(TAN); }
"pow"           { yylval.string = strdup(yytext); return(POW); }
"sqrt"          { yylval.string = strdup(yytext); return(SQRT); }

\n              { return(NEW_LINE); }

[a-z]           { yylval.identifier.name = strdup(yytext); return(ID); }
{number}        { yylval.int_t = atoi(yytext); return(NUM_INT); }
[0-9]*\.[0-9]*  { yylval.float_t = atof(yytext); return(NUM_REAL); } 
[ ] { }

%%

int main(int argc, char *argv[])
{
    yyin = fopen(argv[1], "r");

    yyparse();
    yylex();

    fclose(yyin);

    return 0;
}